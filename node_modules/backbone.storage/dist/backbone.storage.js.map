{"version":3,"sources":["backbone.storage.js"],"names":[],"mappings":"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","file":"backbone.storage.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone'), require('backbone-metal')) :\n  typeof define === 'function' && define.amd ? define(['backbone', 'backbone-metal'], factory) :\n  global.Backbone.Storage = factory(global.Backbone, global.Metal)\n}(this, function (Backbone, Metal) { 'use strict';\n\n  var Storage = Backbone.Storage = Metal.Class.extend({\n\n    /**\n     * The model class to store.\n     * @type {Backbone.Model}\n     */\n    model: Backbone.Model,\n\n    /**\n     * The collection class to store.\n     * @type {Backbone.Collection}\n     */\n    collection: Backbone.Collection,\n\n    /**\n     * @public\n     * @constructs Storage\n     */\n    constructor() {\n      this.records = new this.collection();\n      this.listenToOnce(this.records, 'sync', () => {\n        this._hasSynced = true;\n      });\n      this._super.apply(this, arguments);\n    },\n\n    /**\n     * Find a specific model from the store or fetch it from the server and insert\n     * it into the store.\n     *\n     * @public\n     * @instance\n     * @method find\n     * @memberOf Storage\n     * @param {Number|String|Object|Backbone.Model} model - The model to find.\n     * @returns {Promise} - A promise that will resolve to the model.\n     */\n    find(model) {\n      let record = this.records.get(model);\n      if (record) {\n        return Promise.resolve(record);\n      } else {\n        model = this._ensureModel(model);\n        return Promise.resolve(model.fetch()).then(() => {\n          return this.insert(model);\n        });\n      }\n    },\n\n    /**\n     * Find all the models in the store or fetch them from the server if they\n     * haven't been fetched before.\n     *\n     * @public\n     * @instance\n     * @method findAll\n     * @memberOf Storage\n     * @returns {Promise} - A promise that will resolve to the entire collection.\n     */\n    findAll() {\n      if (this._hasSynced) {\n        return Promise.resolve(this.records);\n      } else {\n        return Promise.resolve(this.records.fetch()).then(() => {\n          return this.records;\n        });\n      }\n    },\n\n    /**\n     * Save a model to the server.\n     *\n     * @public\n     * @instance\n     * @method save\n     * @memberOf Storage\n     * @param {Number|String|Object|Backbone.Model} model - The model to save\n     * @returns {Promise} - A promise that will resolve to the saved model.\n     */\n    save(model) {\n      let record = this.records.get(model);\n      model = record || this._ensureModel(model);\n      return Promise.resolve(model.save()).then(() => {\n        if (!record) {\n          this.insert(model);\n        }\n        return model;\n      });\n    },\n\n    /**\n     * Insert a model into the store.\n     *\n     * @public\n     * @instance\n     * @method insert\n     * @memberOf Storage\n     * @params {Object|Backbone.Model} - The model to add.\n     * @returns {Promise} - A promise that will resolve to the added model.\n     */\n    insert(model) {\n      model = this.records.add(model);\n      return Promise.resolve(model);\n    },\n\n    /**\n     * Ensure that we have a real model from an id, object, or model.\n     *\n     * @private\n     * @instance\n     * @method _ensureModel\n     * @memberOf Storage\n     * @params {Number|String|Object|Backbone.Model} - An id, object, or model.\n     * @returns {Backbone.Model} - The model.\n     */\n    _ensureModel(model) {\n      if (model instanceof this.model) {\n        return model;\n      } else if (typeof model === 'object') {\n        return new this.model(model);\n      } else {\n        return new this.model({ id: model });\n      }\n    }\n  });\n\n  var backbone_storage = Storage;\n\n  return backbone_storage;\n\n}));\n"],"sourceRoot":"/source/"}